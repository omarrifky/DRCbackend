package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.mysql.cj.jdbc.CallableStatement;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

@RestController
public class HomeController  {

	@CrossOrigin(origins = "*")
	@PostMapping(value = "/login")
	public ResponseEntity login(@RequestBody String userStr) {
		String username;
		String password;
		try {

			JSONObject user = new JSONObject(userStr);
			username = user.getString("username");
			password = user.get("password").toString();

			try {
				if (username != null && password != null) {
					Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false",
							"root", "Tatafifi1997");
					Statement myStmt = myConn.createStatement();

					ResultSet owner = myStmt.executeQuery("select * from Owner ");

					while (owner.next()) {
//System.out.print(owner.getString("Email"));
						if (owner.getString("Email").equalsIgnoreCase(username) || owner.getString("username").equalsIgnoreCase(username)
								&& owner.getString("Userpassword").equals(password))
							return new ResponseEntity(true, HttpStatus.OK);
					}

					ResultSet employee = myStmt.executeQuery("select * from Employee");
					while (employee.next()) {

						if (employee.getString("Email").equalsIgnoreCase(username)  || employee.getString("username").equalsIgnoreCase(username)
								&& employee.getString("Userpassword").equals(password))
							return new ResponseEntity(true, HttpStatus.OK);
					}
				}
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}

	@CrossOrigin(origins = "*")
	@PostMapping(value = "/ApplyAnnualandCasualLeaveRequest")
	public ResponseEntity ApplyAnnualandCasualLeaveRequest(@RequestBody String requestStr) {
		String username;
		String from;
		String to;
		String comment;
		String timeinday;
		String type;
		try {

			JSONObject request = new JSONObject(requestStr);
			username = request.getString("username");
			from = request.getString("from");
			to = request.getString("to");
			comment = request.getString("comment");
			timeinday = request.getString("timeinday");
			type = request.getString("type");

			try {
				String query = "CALL ApplyCasualLeaveRequest(" + "\"" + username + "\"" + "," + "\"" + comment + "\""
						+ "," + "\"" + from + "\"" + "," + "\"" + to + "\"" + "," + "\"" + timeinday + "\"" + "," + "\""
						+ type + "\"" + ")  ";
				//System.out.println(query);
				Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
						"Tatafifi1997");

				CallableStatement cs = (CallableStatement) myConn.prepareCall(query);
				// cs.registerOutParameter(1, java.sql.Types.INTEGER);
				cs.execute();

				return new ResponseEntity(true, HttpStatus.OK);
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}

	@CrossOrigin(origins = "*")
	@RequestMapping("/ViewMyCasualRequests/{username}")
	public ResponseEntity ViewMyCasualRequests(@PathVariable String username) {

		try {
			String query = "{result = CALL ViewmyPreviousAnnualRequests(" + "\"" + username + "\"" + ")}";
			String Type;
			String Date;
			String Reviewerusername;
			String Status;
			String Employeeusername;
			String Id;
			String FromDate;
			String ToDate;
			String annualorcasual;
			String comment;
			
			Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
					"Tatafifi1997");
			Statement myStmt = myConn.createStatement();
			ResultSet r = myStmt.executeQuery(
					"select * from Request R inner join LeaveRequest L where L.Id = R.Id and R.Employeeusername = "
							+ "\"" + username + "\"" + "and L.CasualorAnnual =" + "\"" + "Casual" + "\"");
			ArrayList<Request> Requests = new ArrayList<Request>();
            while(r.next()) {
           Type = r.getString("Type");
           Date = r.getString("Date");
           FromDate = r.getString("FromDate");
           ToDate = r.getString("ToDate");
           Employeeusername = r.getString("Employeeusername");
           Reviewerusername = r.getString("Reviewerusername");
           comment = r.getString("Comment");
           annualorcasual = r.getString("CasualorAnnual");
		    Status = r.getString("Status");
		    
			Id = r.getString("Id");
			Requests.add(new AnnualorCasualRequest(Type,Date,Reviewerusername,Employeeusername,Status,Id,annualorcasual,comment,FromDate,ToDate));
            }

			//System.out.println(1);
			return new ResponseEntity(Requests, HttpStatus.OK);
		} catch (Exception exc) {
			exc.printStackTrace();
		}

		return new ResponseEntity(null, HttpStatus.OK);
	}

	@CrossOrigin(origins = "*")
	@RequestMapping("/ViewMyAnnualRequests/{username}")
	public ResponseEntity ViewMyAnnualRequests(@PathVariable String username) {

		try {
			String query = "{result = CALL ViewmyPreviousAnnualRequests(" + "\"" + username + "\"" + ")}";
			String Type;
			String Date;
			String Reviewerusername;
			String Status;
			String Employeeusername;
			String Id;
			String FromDate;
			String ToDate;
			String comment;
			String annualorcasual;
			Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
					"Tatafifi1997");
			Statement myStmt = myConn.createStatement();
			ResultSet r = myStmt.executeQuery(
					"select * from Request R inner join LeaveRequest L where L.Id = R.Id and R.Employeeusername = "
							+ "\"" + username + "\"" + "and L.CasualorAnnual =" + "\"" + "Annual" + "\"");

			ArrayList<Request> Requests = new ArrayList<Request>();
			while(r.next()) {
		           Type = r.getString("Type");
		           Date = r.getString("Date");
		           Employeeusername = r.getString("Employeeusername");
		           Reviewerusername = r.getString("Reviewerusername");
		           comment = r.getString("Comment");
		           annualorcasual = r.getString("CasualorAnnual");
				    Status = r.getString("Status");
				    FromDate = r.getString("FromDate");
			           ToDate = r.getString("ToDate");
					Id = r.getString("Id");
					Requests.add(new AnnualorCasualRequest(Type,Date,Reviewerusername,Employeeusername,Status,Id,annualorcasual,comment,FromDate,ToDate));
		            }
			//System.out.println(1);
			return new ResponseEntity(Requests, HttpStatus.OK);
		} catch (Exception exc) {
			exc.printStackTrace();
		}

		return new ResponseEntity(null, HttpStatus.OK);
	}

	@CrossOrigin(origins = "*")
	@RequestMapping("/ViewMySickRequests/{username}")
	public ResponseEntity ViewMySickRequests(@PathVariable String username) {

		try {
			String query = "{result = CALL ViewmyPreviousAnnualRequests(" + "\"" + username + "\"" + ")}";
			String timeinday;
			String Date;
			String Reviewerusername;
			String Status;
			String Employeeusername;
			String Id;
			String FromDate;
			String ToDate;
			String MedicalUrl;
			Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
					"Tatafifi1997");
			Statement myStmt = myConn.createStatement();
			ResultSet r = myStmt.executeQuery(
					"select * from Request R inner join SickRequest L where L.Id = R.Id and R.Employeeusername = "
							+ "\"" + username + "\"");

			ArrayList<Request> Requests = new ArrayList<Request>();
            while(r.next()) {
           timeinday = r.getString("timeinday");
           Date = r.getString("Date");
           Employeeusername = r.getString("Employeeusername");
           Reviewerusername = r.getString("Reviewerusername");
			Status = r.getString("Status");
			Id = r.getString("Id");
			FromDate = r.getString("FromDate");
	           ToDate = r.getString("ToDate");
			MedicalUrl = r.getString("MedicalReportURL");
			Requests.add(new SickRequest(timeinday,Date,Employeeusername,Reviewerusername,Status,Id,MedicalUrl,FromDate,ToDate));
            }
			

			//System.out.println(1);
			return new ResponseEntity(Requests, HttpStatus.OK);
		} catch (Exception exc) {
			exc.printStackTrace();
		}

		return new ResponseEntity(null, HttpStatus.OK);
	}
	@CrossOrigin(origins = "*")
	@RequestMapping("/ViewMyWorkFromHomeRequests/{username}")
	public ResponseEntity ViewMyWorkFromHomeRequests(@PathVariable String username) {

		try {
			String query = "{result = CALL ViewmyPreviousAnnualRequests(" + "\"" + username + "\"" + ")}";
			String Type;
			String Date;
			String Employeeusername;
			String Id;
			String Reviewerusername;
			String Status;
			String comment;
			String FromDate;
			String ToDate;
			Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
					"Tatafifi1997");
			Statement myStmt = myConn.createStatement();
			ResultSet r = myStmt.executeQuery(
					"select * from Request R inner join WorkFromHomeRequest W where W.Id = R.Id and R.Employeeusername = "
							+ "\"" + username + "\"");
			ArrayList<Request> Requests = new ArrayList<Request>();
            while(r.next()) {

           Date = r.getString("Date");
           Employeeusername = r.getString("Employeeusername");
           Reviewerusername = r.getString("Reviewerusername");
			Status = r.getString("Status");
			Id = r.getString("Id");
			FromDate = r.getString("startdate");
	           ToDate = r.getString("enddate");
			comment = r.getString("Comment");
			Requests.add(new WorkFromHomeRequest(Date,Employeeusername,Reviewerusername,Status,Id,comment,FromDate,ToDate));
            }
			

			//System.out.println(req.get(0));
			return new ResponseEntity(Requests, HttpStatus.OK);
		} catch (Exception exc) {
			exc.printStackTrace();
		}

		return new ResponseEntity(null, HttpStatus.OK);
	}
	
	@CrossOrigin(origins = "*")
	@PostMapping(value = "/ApplySickRequest")
	public ResponseEntity ApplySickRequest(@RequestBody String requestStr) {
		String username;
		String startdate;
		String enddate;
		String comment;
		String timeinday;
		String link;
		try {

			JSONObject request = new JSONObject(requestStr);
			username = request.getString("username");
			startdate = request.getString("Startdate");
			enddate = request.getString("Enddate");
			comment = request.getString("Comment");
			timeinday = request.getString("timeinday");
            link  = request.getString("Link");
			try {
				String query = "{ CALL ApplyForSickRequest(" + "\"" + username + "\"" + "," + "\"" + startdate + "\""
						+ "," + "\"" + enddate + "\"" + "," + "\"" + link  + "\"" + "," + "\"" +  comment + "\"" + "," + "\""
						+ timeinday + "\"" + ") } ";
				//System.out.println(query);
		
				
				Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
						"Tatafifi1997");

				CallableStatement cs = (CallableStatement) myConn.prepareCall(query);
				// cs.registerOutParameter(1, java.sql.Types.INTEGER);
				cs.execute();

				return new ResponseEntity(true, HttpStatus.OK);
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}

	@CrossOrigin(origins = "*")
	@PostMapping(value = "/ApplyWorkFromHomeRequest")
	public ResponseEntity ApplyWorkFromHomeRequest(@RequestBody String requestStr) {
		String username;
		String startdate;
		String enddate;
		String comment;
		String timeinday;
		String link;
		try {

			JSONObject request = new JSONObject(requestStr);
			username = request.getString("username");
			startdate = request.getString("Startdate");
			enddate = request.getString("Enddate");
			comment = request.getString("Comment");

			try {
				String query = "{ CALL ApplyWorkFromHomeRequest(" + "\"" + username + "\"" + "," + "\"" + startdate + "\""
						+ "," + "\"" + enddate + "\"" + "," + "\"" +  comment + "\""+") } ";
				//System.out.println(query);
		
				
				Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
						"Tatafifi1997");

				CallableStatement cs = (CallableStatement) myConn.prepareCall(query);
				// cs.registerOutParameter(1, java.sql.Types.INTEGER);
				cs.execute();

				return new ResponseEntity(true, HttpStatus.OK);
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}	
	@CrossOrigin(origins = "*")
	@PostMapping(value = "/ApplyReciptClaimRequest")
	public ResponseEntity ApplyReciptClaimRequest(@RequestBody String requestStr) {
		String username;
		String startdate;
        String Amount;
		String comment;
		String link;
		try {

			JSONObject request = new JSONObject(requestStr);
			username = request.getString("username");
			comment = request.getString("Comment");
            Amount = request.getString("Amount");
             startdate = request.getString("DueDate");
            link = request.getString("ReciptLink");
			try {
				


				String query = "{ CALL ReciptClaimRequest(" + "\"" + username + "\"" + "," + "\"" + Amount + "\""
						+ "," + "\"" + startdate + "\"" + "," + "\"" + comment + "\""+  "," + "\""+link+"\""+") } ";
			
				Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
						"Tatafifi1997");

				CallableStatement cs = (CallableStatement) myConn.prepareCall(query);
				// cs.registerOutParameter(1, java.sql.Types.INTEGER);
				cs.execute();

				return new ResponseEntity(true, HttpStatus.OK);
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}	
	
	@CrossOrigin(origins = "*")
	@RequestMapping("/ViewMyReviewedRequests/{username}")
	public ResponseEntity ViewMyReviewedRequests(@PathVariable String username) {
//System.out.println("hww");
		try {
			
			String Type;
			String Date;
			String Employeeusername;
			String Status;
			String Id;
			String Reviewerusername;
			String comment;
			String annualorcasual;
			String medicalurl;
			
			Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
					"Tatafifi1997");
			Statement myStmt = myConn.createStatement();
		//	System.out.println("select * from Request R   and R.Reviewerusername = "+ "\"" + username + "\"");
			ResultSet r = myStmt.executeQuery("select * from  Request  R   where   R.Reviewerusername = "+ "\"" + username + "\"");
			ArrayList<Request> Requests = new ArrayList<Request>();
             while(r.next()) {
            Date = r.getString("Date");
            Employeeusername = r.getString("Employeeusername");
            Reviewerusername = r.getString("Reviewerusername");
			Status = r.getString("Status");
			Id = r.getString("Id");
			comment = r.getString("Comment");
		
			Requests.add(new Request(Date,Employeeusername,Reviewerusername,Status,Id,comment,"","",""));
             }
             
			//System.out.println(req.get(0));
			return new ResponseEntity(Requests, HttpStatus.OK);
		} catch (Exception exc) {
			exc.printStackTrace();
		}

		return new ResponseEntity(null, HttpStatus.OK);
	}
	
	@CrossOrigin(origins = "*")
	@RequestMapping("/ViewRequestbyId/{requestid}")
	public ResponseEntity ViewRequestbyId(@PathVariable String requestid) {
		//System.out.println("hww");
		try {
		String query = "{result = CALL ViewmyPreviousAnnualRequests(" + "\"" + requestid + "\"" + ")}";
		String Type;
		String Date;
		String Employeeusername;
		String Status;
		String Id;
		String Reviewerusername;
		String comment;
		String annualorcasual;
		String medicalurl;
		String FromDate;
		String ToDate;
		String amount;
		Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
				"Tatafifi1997");
		Statement myStmt = myConn.createStatement();
		//System.out.println("select * from Request R   and R.Reviewerusername = "+ "\"" + requestid + "\"");
		ResultSet r = myStmt.executeQuery("select * from LeaveRequest L inner join Request  R   where  R.Id = L.Id and R.Id = "+ "\"" + requestid + "\"");
		ArrayList<Request> Requests = new ArrayList<Request>();
         while(r.next()) {
        Date = r.getString("Date");
        Employeeusername = r.getString("Employeeusername");
        Reviewerusername = r.getString("Reviewerusername");
		Status = r.getString("Status");
		Id = r.getString("Id");
		comment = r.getString("Comment");
		Type = r.getString("Type");
		FromDate = r.getString("FromDate");
		ToDate = r.getString("ToDate");
		annualorcasual = r.getString("CasualorAnnual");
		Requests.add(new AnnualorCasualRequest(Type,Date,Employeeusername,Reviewerusername,Status,Id,annualorcasual,comment,FromDate,ToDate));
         }
         ResultSet sick = myStmt.executeQuery("select * from SickRequest L inner join Request R   where  R.Id = L.Id and R.Id = "+ "\"" + requestid + "\"");
         while(sick.next()) {
             Date = sick.getString("Date");
             Employeeusername = sick.getString("Employeeusername");
             Reviewerusername =sick.getString("Reviewerusername");
 			Status = sick.getString("Status");
 			Id = sick.getString("Id");
 			comment = sick.getString("Comment");
 			Type = sick.getString("timeinday");
 			medicalurl = sick.getString("MedicalReportURL");
 			FromDate = sick.getString("FromDate");
 			ToDate = sick.getString("ToDate");
 		//	System.out.println(Reviewerusername);
 			Requests.add(new SickRequest(Type,Date,Employeeusername,Reviewerusername,Status,Id,medicalurl,FromDate,ToDate));
              }
         
         ResultSet workfromhome = myStmt.executeQuery("select * from WorkFromHomeRequest  L inner join Request R   where  R.Id = L.Id and  R.Id = "+ "\"" + requestid + "\"");
         while(workfromhome.next()) {
             Date = workfromhome.getString("Date");
             Employeeusername = workfromhome.getString("Employeeusername");
             Reviewerusername =workfromhome.getString("Reviewerusername");
 			Status = workfromhome.getString("Status");
 			Id = workfromhome.getString("Id");
 			comment = workfromhome.getString("Comment");
 			FromDate = workfromhome.getString("startdate");
 			ToDate = workfromhome.getString("enddate");
 			WorkFromHomeRequest x = new WorkFromHomeRequest(Date,Employeeusername,Reviewerusername,Status,Id,comment,FromDate,ToDate);
 			Requests.add(x);
 			//System.out.println(Reviewerusername);
 			
              }
         ResultSet fund = myStmt.executeQuery("select * from ReciptRequest  L inner join Request R   where  R.Id = L.Id and  R.Id = "+ "\"" + requestid + "\"");
         while(fund.next()) {
             Date = fund.getString("Date");
             Employeeusername = fund.getString("Employeeusername");
             Reviewerusername =fund.getString("Reviewerusername");
 			Status = fund.getString("Status");
 			Id = fund.getString("Id");
 			//System.out.println(Id);
 			comment = fund.getString("Comment");
 			amount = fund.getString("amount");
 			FundRequest x = new FundRequest(Date,Employeeusername,Reviewerusername,"ReciptClaim",Status,Id,comment,amount);
 			Requests.add(x);
 			//System.out.println(Reviewerusername);
 			
              }

					//System.out.println(req.get(0));
					return new ResponseEntity(Requests, HttpStatus.OK);
		}
		catch (Exception exc) {
			exc.printStackTrace();
		}
		return new ResponseEntity(null, HttpStatus.OK);
	} 
					

			
				
	
	 
	@CrossOrigin(origins = "*")
	@PostMapping(value = "/ApproveRequest")
	public ResponseEntity ApproveRequest(@RequestBody String requestStr) {
		String username;
		String requestid;
		try {

			JSONObject request = new JSONObject(requestStr);
			username = request.getString("reviewerusername");
			requestid = request.getString("requestid");
			
			try {
				String query = "{ CALL ApproveRequest(" + "\"" + username + "\"" + "," + "\"" + requestid + "\"" +") } ";
				//System.out.println(query);
		
				
				Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
						"Tatafifi1997");

				CallableStatement cs = (CallableStatement) myConn.prepareCall(query);
				// cs.registerOutParameter(1, java.sql.Types.INTEGER);
				cs.execute();

				return new ResponseEntity(true, HttpStatus.OK);
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}
	
	@CrossOrigin(origins = "*")
	@PostMapping(value = "/RejectRequest")
	public ResponseEntity RejectRequest(@RequestBody String requestStr) {
		String username;
		String requestid;
		String comment;
		try {

			JSONObject request = new JSONObject(requestStr);
			username = request.getString("reviewerusername");
			requestid = request.getString("requestid");
			comment = request.getString("comment");
			
			try {
				String query = "{ CALL RejectRequest(" + "\"" + username + "\"" + "," + "\"" + requestid + "\"" +","+"\""+comment+"\"" +")} ";
				//System.out.println(query);
		
				
				Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
						"Tatafifi1997");

				CallableStatement cs = (CallableStatement) myConn.prepareCall(query);
				// cs.registerOutParameter(1, java.sql.Types.INTEGER);
				cs.execute();

				return new ResponseEntity(true, HttpStatus.OK);
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}
	
	@CrossOrigin(origins = "*") // 3ashan accept el request
	@PostMapping(value = "/IsOwner")
	public ResponseEntity IsOwner(@RequestBody String userstr) {
		String username;
		try {

			JSONObject request = new JSONObject(userstr);
			 username = request.getString("username");
			try {
				
					Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false",
							"root", "Tatafifi1997");
					Statement myStmt = myConn.createStatement();

					ResultSet employee = myStmt.executeQuery("select * from Owner");
					while (employee.next()) {
						
						if (employee.getString("username").equalsIgnoreCase(username))
							return new ResponseEntity(true, HttpStatus.OK);
					}
				
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}
	@CrossOrigin(origins = "*") // 3ashan accept el request
	@PostMapping(value = "/IsManager")
	public ResponseEntity IsManager(@RequestBody String userstr) {
		String username;
			
		try {

			JSONObject request = new JSONObject(userstr);
			 username = request.getString("username");
			try {
				
					Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false",
							"root", "Tatafifi1997");
					Statement myStmt = myConn.createStatement();

					ResultSet Manager = myStmt.executeQuery("select * from Manager");
					while (Manager.next()) {
						if (Manager.getString("username").equalsIgnoreCase(username)) {

							return new ResponseEntity(true, HttpStatus.OK);
						}
					}
				
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}
	@CrossOrigin(origins = "*") // 3ashan accept el request
	@PostMapping(value = "/IsAdmin")
	public ResponseEntity IsAdmin(@RequestBody String userstr) {
		String username;
		try {

			JSONObject request = new JSONObject(userstr);
			 username = request.getString("username");
			try {
				
					Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false",
							"root", "Tatafifi1997");
					Statement myStmt = myConn.createStatement();

					ResultSet employee = myStmt.executeQuery("select * from Employee");
					while (employee.next()) {

						if (employee.getString("username").equalsIgnoreCase(username)
								&& employee.getString("Adminbit").equals("1"))
							
							return new ResponseEntity(true, HttpStatus.OK);
					}
				
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}
	@CrossOrigin(origins = "*")
	@PostMapping(value = "/IsHr") //3ashan ye add users
	public ResponseEntity IsHr(@RequestBody String userstr) {
	String username;
			
		try {

			JSONObject request = new JSONObject(userstr);
			 username = request.getString("username");
		

			try {
				Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?useSSL=false", "root",
						"Tatafifi1997");
		Statement myStmt = myConn.createStatement();
		ResultSet HREmployee = myStmt.executeQuery("select * from HR");
		while (HREmployee.next()) {
	
			if (HREmployee.getString("username").equalsIgnoreCase(username))
				
				return new ResponseEntity(true, HttpStatus.OK);
		}
		ResultSet ManagerEmployee = myStmt.executeQuery("select * from Manager H where H.isHr =1");
		while (ManagerEmployee.next()) {
	
			if (ManagerEmployee.getString("username").equalsIgnoreCase(username))
				
				return new ResponseEntity(true, HttpStatus.OK);
		}

				return new ResponseEntity(false, HttpStatus.OK);
			} catch (Exception exc) {
				exc.printStackTrace();
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		return new ResponseEntity(false, HttpStatus.OK);
	}
}